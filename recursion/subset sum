You are given an array 'A' of 'N' integers. You have to return true if there exists a subset of elements of 'A' that sums up to 'K'. Otherwise, return false.



For Example
'N' = 3, 'K' = 5, 'A' = [1, 2, 3].
Subset [2, 3] has sum equal to 'K'.
So our answer is True.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
4 13
4 3 5 2
Sample Output 1 :
No
Sample Input 2 :
5 14
4 2 5 6 7
Sample Output 2 :
Yes


bool helper(int ind,int k,vector<int> &a,vector<vector<int>> &dp){
    // pehle check kro agar k ki value zero ho gayi hai
    if (k==0){
        return true;
    }
    if (ind==0){
        return a[ind]==k;
    }
    if (dp[ind][k]!=-1){
        return dp[ind][k];
    }
    bool pick=false;
    if (k>=a[ind]){
        pick=helper(ind-1,k-a[ind],a,dp);
    }
    bool notpick=helper(ind-1,k,a,dp);
    
    return dp[ind][k]=pick||notpick;
}

bool isSubsetPresent(int n, int k, vector<int> &a)
{
    vector<vector<int>> dp(n,vector<int> (k+1,-1));
    return helper(n-1,k,a,dp);
}
