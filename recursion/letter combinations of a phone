Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]

class Solution {
public:

    void helper(int ind,string temp,vector<string>& ans,vector<string> &v,string &digits){
        if (ind==digits.size()){
            ans.push_back(temp);
            return;
        }
        int x=digits[ind]-'0';
        string z=v[x];
        for (int i=0;i<z.size();i++){
            temp.push_back(z[i]);
            helper(ind+1,temp,ans,v,digits);
            temp.pop_back();
        }
    }

    vector<string> letterCombinations(string digits) {
        vector<string> v{"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        vector<string> ans;
        if (digits.size()==0){
            return ans;
        }
        helper(0,"",ans,v,digits);
        return ans;
    }
};
