Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].

You may return the answer in any order.

 

Example 1:

Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
Explanation: There are 4 choose 2 = 6 total combinations.
Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.
Example 2:

Input: n = 1, k = 1
Output: [[1]]
Explanation: There is 1 choose 1 = 1 total combination

class Solution {
public:
    void helper(int n,int i,int k,vector<vector<int>> &ans,vector<int> &temp){
        if (k==0){
            ans.push_back(temp);
            return;
        }
        if (n>=i){
            return;
        }
        int val=n+1;
        temp.push_back(val);
        helper(n+1,i,k-1,ans,temp);
        temp.pop_back();
        helper(n+1,i,k,ans,temp);
    }
    vector<vector<int>> combine(int n, int k) {
        vector<vector<int>> ans;
        vector<int> temp;
        helper(0,n,k,ans,temp);
        return ans;
    }
};
