class Solution {
public:

    void helper(int i,int n,int target,vector<int> &arr,vector<vector<int>> &ans,vector<int> &temp){
        if (target==0){
            ans.push_back(temp);
            return;
        }
        if (i>=n){
            return;
        }
        if (target>=arr[i]){
            temp.push_back(arr[i]);
            helper(i+1,n,target-arr[i],arr,ans,temp);
            temp.pop_back();
        }
        int x=arr[i],j=i+1;
        while (j<n && arr[j]==x){
            j++;
        }
        helper(j,n,target,arr,ans,temp);
        
    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<vector<int>> ans;
        vector<int> temp;
        int n=candidates.size();
        helper(0,n,target,candidates,ans,temp);
        return ans;
    }
};
