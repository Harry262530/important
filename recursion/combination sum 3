Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

 

Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.


  class Solution {
public:

    void helper(int i,int k,int n,vector<vector<int>> &ans,vector<int> &temp){
        if (k==0){
            if (n==0){
                ans.push_back(temp);
            }
            return;
        }
        if (i>9){
            return;
        }
        if (n>=i){
            temp.push_back(i);
            helper(i+1,k-1,n-i,ans,temp);
            temp.pop_back();
        }
        helper(i+1,k,n,ans,temp);
    }

    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> ans;
        vector<int> temp;
        helper(1,k,n,ans,temp);
        return ans;
    }
};
