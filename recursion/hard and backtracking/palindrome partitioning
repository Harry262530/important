Given a string s, partition s such that every 
substring
 of the partition is a 
palindrome
. Return all possible palindrome partitioning of s.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

Input: s = "a"
Output: [["a"]]


class Solution {
public:

    bool ispal(string s,int low,int high){
        while (low<=high){
            if (s[low]!=s[high]){
                return false;
            }
            low++;
            high--;
        }
        return true;
    }

    void helper(int ind,string s,vector<vector<string>> &ans,vector<string> &temp){
        if (ind==s.size()){
            ans.push_back(temp);
            return;
        }

        for (int i=ind;i<s.size();i++){
            if (ispal(s,ind,i)){
                string z=s.substr(ind,i-ind+1);
                temp.push_back(z);
                helper(i+1,s,ans,temp);
                temp.pop_back();
            }
        }
    }

    vector<vector<string>> partition(string s) {
        vector<vector<string>> ans;
        vector<string> temp;
        helper(0,s,ans,temp);
        return ans;
    }
};
