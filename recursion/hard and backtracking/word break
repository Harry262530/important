Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

 

Example 1:

Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false


class Solution {
public:

    bool helper(int ind,string &s,int n,vector<string> &wordDict,unordered_map<string,int> &mp,vector<int> &dp){
        if (ind==n){
            return true;
        }
        if (dp[ind]!=-1){
            return dp[ind];
        }
        bool x=false;
        for (int i=ind;i<n;i++){
            string temp=s.substr(ind,i-ind+1);
            if (mp.find(temp)!=mp.end()){
                if (helper(i+1,s,n,wordDict,mp,dp)) return dp[ind]= true;
            }
        }
        return dp[ind]=false;
    }

    bool wordBreak(string s, vector<string>& wordDict) {
        int n=s.size();
        vector<int> dp(n+1,-1);
        unordered_map<string,int> mp;
        for (auto x:wordDict){
            mp[x]=1;
        }
        return helper(0,s,n,wordDict,mp,dp);
    }
};
