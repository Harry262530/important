The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:


Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:

Input: n = 1
Output: [["Q"]]


class Solution {
public:

    bool issafe(int i,int j,vector<string> &temp){
        int tempr=i;
        int tempc=j;
        // top left diagonal
        while (i>=0 && j>=0){
            if (temp[i][j]=='Q'){
                return false;
            }
            i--;
            j--;
        }
        // left straight
        i=tempr,j=tempc;
        while (j>=0){
            if (temp[i][j]=='Q'){
                return false;
            }
            j--;
        }
        // bottom left diagonal
        i=tempr,j=tempc;
        while (j>=0 && i<temp.size()){
            if (temp[i][j]=='Q'){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }

    void helper(int col,int n,vector<vector<string>> &ans,vector<string> &temp){
        if (col==n){
            ans.push_back(temp);
            return;
        }

        for (int i=0;i<n;i++){
            if (issafe(i,col,temp)){
                temp[i][col]='Q';
                helper(col+1,n,ans,temp);
                temp[i][col]='.';
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> temp(n);
        string s(n,'.');
        for (int i=0;i<n;i++){
            temp[i]=s;
        }
        helper(0,n,ans,temp);
        return ans;
    }
};
