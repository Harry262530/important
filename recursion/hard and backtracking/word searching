Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

 

Example 1:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true
Example 2:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "SEE"
Output: true
Example 3:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCB"
Output: false



class Solution {
public:

    bool helper(int ind,int i,int j,vector<vector<char>> &board,string &word,int n,int m){
        if (ind==word.size()){
            return true;
        }
        if (i<0 || j<0 || i==n || j==m || board[i][j]!=word[ind] || board[i][j]=='Q'){
            return false;
        }
        char c=board[i][j];
        board[i][j]='Q';
        bool left=helper(ind+1,i,j-1,board,word,n,m);
        bool right=helper(ind+1,i,j+1,board,word,n,m);
        bool top=helper(ind+1,i-1,j,board,word,n,m);
        bool down=helper(ind+1,i+1,j,board,word,n,m);
        board[i][j]=c;
        return left || right || top || down;
    }

    bool exist(vector<vector<char>>& board, string word) {
        int n=board.size();
        int m=board[0].size();
        int index=0;
        for (int i=0;i<n;i++){
            for (int j=0;j<m;j++){
                if (board[i][j]==word[index]){
                    if (helper(0,i,j,board,word,n,m)){
                        return true;
                    }
                }
            }
        }
        return false;
    }
};
