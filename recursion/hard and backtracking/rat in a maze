You are given a N*N maze with a rat placed at 'mat[0][0]'. Find all paths that rat can follow to reach its destination i.e. mat[N-1][N-1]. The directions in which the rat can move are 'U'(up), 'D'(down), 'L' (left), 'R' (right).



In the given maze, each cell can have a value of either 0 or 1. Cells with a value of 0 are considered blocked, which means the rat cannot enter or traverse through them. On the other hand, cells with a value of 1 are open, indicating that the rat is allowed to enter and move through those cells.



Example:
mat:{{1, 0, 0, 0},
     {1, 1, 0, 1}, 
     {1, 1, 0, 0},
     {0, 1, 1, 1}}

All possible paths are:
DDRDRR (in red)
DRDDRR (in green)

Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
3
1 1 1
1 0 1
1 1 1
Sample Output 1 :
DDRR
RRDD
Explanation of Sample Input 1:
Only 2 path is possible.

Sample Input 2 :
2
1 1
1 0
Sample Output 2 :
-1
Explanation of Sample Input 2:
No path exists.


#include <bits/stdc++.h>

void helper(int i,int j,string temp,vector<string> &ans,vector<vector<int>> &mat){
    if (i<0 || j<0 || i==mat.size() || j==mat[0].size() || mat[i][j]==0 || mat[i][j]=='Q'){
        return;
    }
    if (i==mat.size()-1 && j==mat[0].size()-1){
        ans.push_back(temp);
        return;
    }
    
    int x=mat[i][j];
    mat[i][j]='Q';
    helper(i-1,j,temp+'U',ans,mat);
    helper(i+1,j,temp+'D',ans,mat);
    helper(i,j-1,temp+'L',ans,mat);
    helper(i,j+1,temp+'R',ans,mat);
    mat[i][j]=x;
}

vector<string> ratMaze(vector<vector<int>> &mat) {
    vector<string> ans;
    helper(0,0,"",ans,mat);
    return ans;
}
