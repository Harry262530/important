Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]

class Solution {
public:

    void helper(int ind,vector<int> &nums,vector<int> &temp,vector<vector<int>> &ans){
        if (ind<0){
            ans.push_back(temp);
            return;
        }

        // take
        temp.push_back(nums[ind]);
        helper(ind-1,nums,temp,ans);
        temp.pop_back();

        // not take
        helper(ind-1,nums,temp,ans);
        return;
    }

    vector<vector<int>> subsets(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>> ans;
        vector<int> temp;
        helper(n-1,nums,temp,ans);
        return ans;
    }
};

