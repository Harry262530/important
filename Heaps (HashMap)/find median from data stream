The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.

For example, for arr = [2,3,4], the median is 3.
For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.
Implement the MedianFinder class:

MedianFinder() initializes the MedianFinder object.
void addNum(int num) adds the integer num from the data stream to the data structure.
double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.
 

Example 1:

Input
["MedianFinder", "addNum", "addNum", "findMedian", "addNum", "findMedian"]
[[], [1], [2], [], [3], []]
Output
[null, null, null, 1.5, null, 2.0]

Explanation
MedianFinder medianFinder = new MedianFinder();
medianFinder.addNum(1);    // arr = [1]
medianFinder.addNum(2);    // arr = [1, 2]
medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)
medianFinder.addNum(3);    // arr[1, 2, 3]
medianFinder.findMedian(); // return 2.0
 

class MedianFinder {
public:
    //2 priority queue one for first half elements and 2nd for greater half elements
    priority_queue<int> first;
    priority_queue<int,vector<int>,greater<int>> second;

    MedianFinder() {
        
    }
    
    void addNum(int num) {
        if (first.empty() || first.top()>num){
            first.push(num);
        }
        else{
            second.push(num);
        }
        //now balancing
        if (first.size()>(second.size()+1)){
            second.push(first.top());
            first.pop();
        }
        else if (second.size()>(first.size()+1)){
            first.push(second.top());
            second.pop();
        }
    }
    
    double findMedian() {
        // agar dono me barabar element hai to even honge
        if (first.size()==second.size()){
            if (first.size()==0){
                return 0;
            }
            else{
                return (first.top()+second.top())/2.0;
            }
        }
        else{
            if (first.size()>second.size()){
                return first.top()/1.0;
            }
            else{
                return second.top()/1.0;
            }
        }
    }
};



