Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.

An integer a is closer to x than an integer b if:

|a - x| < |b - x|, or
|a - x| == |b - x| and a < b
 

Example 1:

Input: arr = [1,2,3,4,5], k = 4, x = 3
Output: [1,2,3,4]
Example 2:

Input: arr = [1,2,3,4,5], k = 4, x = -1
Output: [1,2,3,4]

1st way using priority queue

class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        priority_queue<pair<int,int>> q;
        for (int i=0;i<arr.size();i++){
            q.push({abs(arr[i]-x),arr[i]});
            if (q.size()>k){
                q.pop();
            }
        }
        vector<int> ans;
        while (!q.empty()){
            ans.push_back(q.top().second);
            q.pop();
        }
        sort(ans.begin(),ans.end());
        return ans;
    }
};



2nd way using 2 pointers

class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        int start=0,end=arr.size()-1;
        while (end-start>=k){
            if (abs(arr[start]-x)<=abs(arr[end]-x)){
                end--;
            }
            else{
                start++;
            }
        }
        vector<int> ans;
        for (int i=start;i<=end;i++){
            ans.push_back(arr[i]);
        }
        return ans;
    }
};
