Given an array of n elements, where each element is at most k away from its target position, you need to sort the array optimally.

Example 1:

Input:
n = 7, k = 3
arr[] = {6,5,3,2,8,10,9}
Output: 2 3 5 6 8 9 10
Explanation: The sorted array will be
2 3 5 6 8 9 10


{
    public:
    //Function to return the sorted array.
    vector <int> nearlySorted(int arr[], int num, int K){
        vector<int> ans;
        priority_queue<int,vector<int>,greater<int>> q;
        for (int i=0;i<num;i++){
            q.push(arr[i]);
            if (q.size()>K){
                ans.push_back(q.top());
                q.pop();
            }
        }
        while (!q.empty()){
            ans.push_back(q.top());
            q.pop();
        }
        return ans;
    }
};
