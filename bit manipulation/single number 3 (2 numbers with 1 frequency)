Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.

You must write an algorithm that runs in linear runtime complexity and uses only constant extra space.

 

Example 1:

Input: nums = [1,2,1,3,2,5]
Output: [3,5]
Explanation:  [5, 3] is also a valid answer.
Example 2:

Input: nums = [-1,0]
Output: [-1,0]
Example 3:

Input: nums = [0,1]
Output: [1,0]

class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        // sbse pehle sbka xor nikalo, to last me 2 individual numbers ka xor aayega
        // uska xor ye denote krega ko konse konse bits me values different hai , fir sbse right most set bit ko rakha check rkne ke liye taaki dono alag values alag alag variables me ja ske
        // aur rightmost set bit of difference number nikalne ke liye pehle x ko x-1 se & kro taaki right most set bit unset ho jaye, fir usko x se xor kr do taki right most set bit me change aaye aur usko position pta chl jaaye
        // fir 2 variable bnao(buckets) aur dono ko last vali set bit se and krke check kro ki vo konse bucket me belong krti hai, jo bhi pairs me jayenge vo dono ek hi bucket me jaake xor ho jayenge aur dono buckets me individuals hi bach jayenge bs
        long xor0=0;
        long isliye use kra hai kyuki agar single element -2^31 hoga to uska x-1 krke xor krne ko -2^31-1 int ke bahar ho jayega
        for (auto x:nums){
            xor0^=x;
        }
        int rightmost=((xor0&(xor0-1))^xor0);
        int xor1=0,xor2=0;
        for (int i=0;i<nums.size();i++){
            if ((nums[i]&rightmost)){
                xor1=(xor1^nums[i]);
            }
            else{
                xor2=(xor2^nums[i]);
            }
        }
        return {xor1,xor2};
    }
};
