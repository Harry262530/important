There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1



class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n=nums.size();
        int low=0,high=n-1;
        while (low<=high){
            int mid=low+(high-low)/2;
            if (nums[mid]==target){
                return mid;
            }
            // if we will get which part of array is sorted then we can check if the target lies in that part of sorted array and if not then it will lie in the non sorted array

            // LEFT SORTED
            if (nums[mid]>=nums[low]){
                // agar left sorted hai aur target left vale me hi lie krta hai
                if (target>=nums[low] && target<=nums[mid]){
                    high=mid-1;
                }
                // agar left sorted me lie na kre
                else{
                    low=mid+1;
                }
            }

            // RIGHT SORTED
            else{
                // agar right sorted array me hi lie krega target to low ko aage le aao aur left array ko eliminate kr do
                if (target<=nums[high] && target>=nums[mid]){
                    low=mid+1;
                }
                else{
                    high=mid-1;
                }
            }
        }
        return -1;
    }
};
