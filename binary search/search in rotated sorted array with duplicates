There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).

Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].

Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.

You must decrease the overall operation steps as much as possible.

 

Example 1:

Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:

Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false


class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int n=nums.size();
        int low=0,high=n-1;
        while (low<=high){
            int mid=low+(high-low)/2;
            if (nums[mid]==target){
                return true;
            }

            // rest all is same as simple search in rotated sorted array without duplicates, the only place jaha ye nhi chlega is when nums[low]==nums[mid]==nums[high] kyuki vha comparision nhi ho payega konsa sorted hai to apne options ko trim down kro
            if (nums[low]==nums[mid] && nums[mid]==nums[high]){
                low++;
                high--;
                continue;
            } 


            // if we will get which part of array is sorted then we can check if the target lies in that part of sorted array and if not then it will lie in the non sorted array

            // LEFT SORTED
            if (nums[mid]>=nums[low]){
                // agar left sorted hai aur target left vale me hi lie krta hai
                if (target>=nums[low] && target<=nums[mid]){
                    high=mid-1;
                }
                // agar left sorted me lie na kre
                else{
                    low=mid+1;
                }
            }

            // RIGHT SORTED
            else{
                // agar right sorted array me hi lie krega target to low ko aage le aao aur left array ko eliminate kr do
                if (target<=nums[high] && target>=nums[mid]){
                    low=mid+1;
                }
                else{
                    high=mid-1;
                }
            }
        }
        return false;
    }
};
