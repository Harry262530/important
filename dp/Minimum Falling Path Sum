Given an n x n integer matrix grid, return the minimum sum of a falling path with non-zero shifts.

A falling path with non-zero shifts is a choice of exactly one element from each row of grid such that no two elements chosen in adjacent rows are in the same column.

 

Example 1:


Input: grid = [[1,2,3],[4,5,6],[7,8,9]]
Output: 13
Explanation: 

The possible falling paths are:
[1,5,9], [1,5,7], [1,6,7], [1,6,8],
[2,4,8], [2,4,9], [2,6,7], [2,6,8],
[3,4,8], [3,4,9], [3,5,7], [3,5,9]
The falling path with the smallest sum is [1,5,7], so the answer is 13.
Example 2:

Input: grid = [[7]]
Output: 7


class Solution {
public:

    int helper(int r,int c,vector<vector<int>> &grid,vector<vector<int>> &dp){
        if (r==grid.size()-1){
            return grid[r][c];
        }
        if (dp[r][c]!=-1){
            return dp[r][c];
        }
        int left=INT_MAX;
        for (int i=0;i<grid[0].size();i++){
            if (i!=c){
                left=min(left,grid[r][c]+helper(r+1,i,grid,dp));
            }
        }
        return dp[r][c]=left; 
    }

    int minFallingPathSum(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> dp(n,vector<int> (m,-1));
        int mini=INT_MAX;
        for (int i=0;i<m;i++){
            mini=min(mini,helper(0,i,grid,dp));
        }
        return mini;
    }
};
