Given a string s. In one step you can insert any character at any index of the string.

Return the minimum number of steps to make s palindrome.

A Palindrome String is one that reads the same backward as well as forward.

 

Example 1:

Input: s = "zzazz"
Output: 0
Explanation: The string "zzazz" is already palindrome we do not need any insertions.
Example 2:

Input: s = "mbadm"
Output: 2
Explanation: String can be "mbdadbm" or "mdbabdm".
Example 3:

Input: s = "leetcode"
Output: 5
Explanation: Inserting 5 characters the string becomes "leetcodocteel".

class Solution {
public:

    int lcs(string s1,string s2,int n,vector<vector<int>> &t){
        
        for (int i=0;i<n+1;i++){
            for (int j=0;j<n+1;j++){
                if (i==0||j==0){
                    t[i][j]=0;
                }
            }
        }
        for (int i=1;i<n+1;i++){
            for (int j=1;j<n+1;j++){
                if (s1[i-1]==s2[j-1]){
                    t[i][j]=1+t[i-1][j-1];
                }
                else{
                    t[i][j]=max(t[i-1][j],t[i][j-1]);
                }
            }
        }
        return t[n][n];
    }
    int minInsertions(string s) {
        string s1=s;
        reverse(s1.begin(),s1.end());
        int n=s1.length();
        vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
        int x=lcs(s,s1,n,dp);
        int ans=n-x;
        return ans;

    }
};
