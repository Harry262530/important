Given an array of non-negative integers, and a value sum, determine if there is a subset of the given set with sum equal to given sum. 


Example 1:

Input:
N = 6
arr[] = {3, 34, 4, 12, 5, 2}
sum = 9
Output: 1 
Explanation: Here there exists a subset with
sum = 9, 4+3+2 = 9.


bool helper(int n,int target,vector<vector<int>> &dp,vector<int> &arr){
        if (target==0){
            return true;
        }
        if (n==0){
            return arr[n]==target;
        }
        if (dp[n][target]!=-1){
            return dp[n][target];
        }
        bool pick=false;
        if (target>=arr[n]){
            pick=helper(n-1,target-arr[n],dp,arr);
        }
        bool notpick=helper(n-1,target,dp,arr);
        return dp[n][target]=pick||notpick;
    }
    
    bool isSubsetSum(vector<int>arr, int sum){
        int n=arr.size();
        vector<vector<int>> dp(n,vector<int>(sum+1,-1));
        return helper(n-1,sum,dp,arr);
    }

