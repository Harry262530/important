class Solution {
public:
    // int helper(int n,int m,vector<vector<int>> &dp,vector<vector<int>> &grid){
    //     if (n==0 && m==0){
    //         return grid[n][m];
    //     }
    //     if (dp[n][m]!=-1){
    //         return dp[n][m];
    //     }
    //     int down=INT_MAX,right=INT_MAX;
    //     if (n>0){
    //         down=grid[n][m]+helper(n-1,m,dp,grid);
    //     }
    //     if (m>0){
    //         right=grid[n][m]+helper(n,m-1,dp,grid);
    //     }
    //     return dp[n][m]=min(down,right);
    // }
    
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> dp(n,vector<int>(m,0));
        for (int i=0;i<n;i++){
            for (int j=0;j<m;j++){
                if (i==0 && j==0){
                    dp[i][j]=grid[i][j];
                    continue;
                }
                int up=INT_MAX,left=INT_MAX;
                if (i>0){
                    up=grid[i][j]+dp[i-1][j];
                }
                if (j>0){
                    left=grid[i][j]+dp[i][j-1];
                }
                dp[i][j]=min(up,left);
            }
        }
        return dp[n-1][m-1];
    }
};
