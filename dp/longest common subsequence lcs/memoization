Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

 

Example 1:

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.

class Solution {
public:
    int helper(string text1,string text2,int n,int m,vector<vector<int>> &dp){
        if (n<0 || m<0){
            return 0;
        }
        if (dp[n][m]!=-1){
            return dp[n][m];
        }
        if (text1[n]==text2[m]){
            return dp[n][m]=1+helper(text1,text2,n-1,m-1,dp);
        }
        else{
            return dp[n][m]=max(helper(text1,text2,n-1,m,dp),helper(text1,text2,n,m-1,dp));
        }
    }
    int longestCommonSubsequence(string text1, string text2) {
        vector<vector<int>> dp(text1.size(),vector<int>(text2.size(),-1));
        return helper(text1,text2,text1.size()-1,text2.size()-1,dp);
    }
};
