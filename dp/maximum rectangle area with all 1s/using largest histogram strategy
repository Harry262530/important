Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

 

Example 1:


Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.
Example 2:

Input: matrix = [["0"]]
Output: 0
Example 3:

Input: matrix = [["1"]]
Output: 1



 class Solution {
public:

    void nn(vector<int> &height,vector<int> &nsi){
        stack<pair<int,int>> s;
        for (int i=height.size()-1;i>=0;i--){
            if (s.empty()){
                nsi.push_back(height.size());
            }
            else if (s.size()>0 && s.top().first<height[i]){
                nsi.push_back(s.top().second);
            }
            else if (s.size()>0 && s.top().first>=height[i]){
                while (s.size()>0 && s.top().first>=height[i]){
                    s.pop();
                }
                if (s.empty()){
                    nsi.push_back(height.size());
                }
                else{
                    nsi.push_back(s.top().second);
                }
            }
            s.push({height[i],i});
        }
        reverse(nsi.begin(),nsi.end());
    }

    void pp(vector<int> &height,vector<int> &psi){
        stack<pair<int,int>> s1;
        for (int i=0;i<height.size();i++){
            if (s1.empty()){
                psi.push_back(-1);
            }
            else if (s1.size()>0 && s1.top().first<height[i]){
                psi.push_back(s1.top().second);
            }
            else if (s1.size()>0 && s1.top().first>=height[i]){
                while (s1.size()>0 && s1.top().first>=height[i]){
                    s1.pop();
                }
                if (s1.empty()){
                    psi.push_back(-1);
                }
                else{
                    psi.push_back(s1.top().second);
                }
            }
            s1.push({height[i],i});
        }
    }

    int helper(vector<int> height){
        int n=height.size();
        vector<int> nsi;
        vector<int> psi;
        nn(height,nsi);
        pp(height,psi);
        int ans=0;
        for (int i=0;i<height.size();i++){
            int w=nsi[i]-psi[i]-1;
            int h=height[i];
            int area=w*h;
            ans=max(ans,area);
        }
        return ans;
    }

    int maximalRectangle(vector<vector<char>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();
        vector<int> height(m);
        int ans=helper(height);
        for (int i=0;i<n;i++){
            for (int j=0;j<m;j++){
                if (matrix[i][j]=='1'){
                    height[j]+=1;
                }
                else{
                    height[j]=0;
                }
            }
            int temp=helper(height);
            ans=max(ans,temp);
        }
        return ans;
    }
};
