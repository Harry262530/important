Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')


class Solution {
public:

    int helper(int i,int j,string &word1,string &word2,vector<vector<int>> &dp){
        if (i<0){
            return j+1;
        }
        if (j<0){
            return i+1;
        }
        if (dp[i][j]!=-1){
            return dp[i][j];
        }
        if (word1[i]==word2[j]){
            return dp[i][j]=helper(i-1,j-1,word1,word2,dp);
        }
        else{
            return dp[i][j]=1+min(helper(i-1,j,word1,word2,dp),min(helper(i-1,j-1,word1,word2,dp),helper(i,j-1,word1,word2,dp)));
        }
    }

    int minDistance(string word1, string word2) {
        int n1=word1.size();
        int n2=word2.size();
        vector<vector<int>> dp(n1,vector<int>(n2,-1));
        return helper(n1-1,n2-1,word1,word2,dp);
    }
};
