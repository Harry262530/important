You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

 

Example 1:

Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3


int helper(int n,int target,vector<vector<int>> &dp,vector<int> &arr){
    if (n==0){
        if (target==0 && arr[n]==0){
            return 2;
        }
        if (target==0 || target==arr[n]){
            return 1;
        }
        return 0;
    }
    if (dp[n][target]!=-1){
        return dp[n][target];
    }
    int pick=0,notpick=0;
    notpick=helper(n-1,target,dp,arr);
    if (arr[n]<=target){
        pick=helper(n-1,target-arr[n],dp,arr);
    }
    return dp[n][target]=(pick+notpick);
}


    int findTargetSumWays(vector<int>& nums, int target) {
        int total=0;
        int n=nums.size();
        for (int i=0;i<n;i++){
            total+=nums[i];
        }
        if (total - target < 0)
        return 0;
        if ((target-total)%2!=0){
            return 0;
        }
        int need=abs(target-total)/2;
        sort(nums.begin(),nums.end(),greater<int>());
        vector<vector<int>> dp(n,vector<int> (need+1,-1));
        return helper(n-1,need,dp,nums);
    }
};
