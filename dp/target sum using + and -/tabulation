    int findTargetSumWays(vector<int>& nums, int target) {
        int total=0;
        int n=nums.size();
        for (int i=0;i<n;i++){
            total+=nums[i];
        }
        if (total - target < 0)
        return 0;
        if ((target-total)%2!=0){
            return 0;
        }
        int need=abs(target-total)/2;
        vector<vector<int>> dp(n,vector<int> (need+1,0));
        // return helper(n-1,need,dp,nums);
        if (nums[0]==0){
            dp[0][0]=2;
        }
        else{
            dp[0][0]=1;
        }
        if (nums[0]<=need && nums[0]!=0){
            dp[0][nums[0]]=1;
        }
        
        for (int i=1;i<n;i++){
            for (int j=0;j<=need;j++){
                int notpick=dp[i-1][j];
                int pick=0;
                if (j>=nums[i]){
                    pick=dp[i-1][j-nums[i]];
                }
                dp[i][j]=pick+notpick;
            }
        }
        return dp[n-1][need];
    }
};
