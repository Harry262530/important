Given two strings s and t, return the number of distinct subsequences of s which equals t.

The test cases are generated so that the answer fits on a 32-bit signed integer.

 

Example 1:

Input: s = "rabbbit", t = "rabbit"
Output: 3
Explanation:
As shown below, there are 3 ways you can generate "rabbit" from s.
rabbbit
rabbbit
rabbbit
Example 2:

Input: s = "babgbag", t = "bag"
Output: 5
Explanation:
As shown below, there are 5 ways you can generate "bag" from s.
babgbag
babgbag
babgbag
babgbag
babgbag

  class Solution {
public:

    int helper(int i,int j,string &s1,string &s2,vector<vector<int>> &dp){
        if (j<0){
            return 1;
        }
        if (i<0){
            return 0;
        }
        if (dp[i][j]!=-1){
            return dp[i][j];
        }
        if (s1[i]==s2[j]){
            int del=helper(i-1,j-1,s1,s2,dp);
            int notdel=helper(i-1,j,s1,s2,dp);
            return dp[i][j]=del+notdel;
        }
        else{
            return dp[i][j]=helper(i-1,j,s1,s2,dp);
        }
    }

    int numDistinct(string s, string t) {

        int n=s.size();
        int m=t.size();
        vector<vector<int>> dp(n,vector<int>(m,-1));
        return helper(n-1,m-1,s,t,dp);
    }
};
