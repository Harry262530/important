Given a number of stairs and a frog, the frog wants to climb from the 0th stair to the (N-1)th stair. At a time the frog can climb either one or two steps. 
A height[N] array is also given. Whenever the frog jumps from a stair i to stair j, the energy consumed in the jump is abs(height[i]- height[j]), where abs() 
means the absolute difference. We need to return the minimum energy that can be used by the frog to jump from stair 0 to stair N-1.


#include <bits/stdc++.h> 

int helper(int n,vector<int> &dp,vector<int> &heights){
    if (n==0){
        return 0;
    }
    if (dp[n]!=-1){
        return dp[n];
    }
    int one_step=helper(n-1,dp,heights)+abs(heights[n]-heights[n-1]);
    int two_step=INT_MAX;
    if (n>1){
        two_step=helper(n-2,dp,heights)+abs(heights[n]-heights[n-2]);
    }
    
    return dp[n]=min(one_step,two_step);
}
int frogJump(int n, vector<int> &heights)
{
    vector<int> dp(n+1,-1);
    return helper(n-1,dp,heights);
}
