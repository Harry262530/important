int helper(int i,int prev,vector<int> &nums,vector<vector<int>> &dp){
        if (i==nums.size()){
            return 0;
        }
        if (dp[i][prev+1]!=-1){
            return dp[i][prev+1];
        }
        int notpick=helper(i+1,prev,nums,dp);
        int pick=INT_MIN;
        if (prev==-1 || nums[i]>nums[prev]){
            pick=1+helper(i+1,i,nums,dp);
        }
        return dp[i][prev+1]=max(pick,notpick);
    }

    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        // prev index starts from -1 so we can do the cordinate change and if -1 is previous index we will store it in 0 i.e previous index+1;
        vector<vector<int>> dp(n,vector<int> (n+1,-1));
        return helper(0,-1,nums,dp);
    }
