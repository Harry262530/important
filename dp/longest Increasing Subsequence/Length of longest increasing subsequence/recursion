Given an integer array nums, return the length of the longest strictly increasing 
subsequence
.

 

Example 1:

Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
Example 2:

Input: nums = [0,1,0,3,2,3]
Output: 4
Example 3:

Input: nums = [7,7,7,7,7,7,7]
Output: 1

class Solution {
public:

    int helper(int i,int prev,vector<int> &nums){
        if (i==nums.size()){
            return 0;
        }
        int notpick=helper(i+1,prev,nums);
        int pick=INT_MIN;
        if (prev==-1 || nums[i]>nums[prev]){
            pick=1+helper(i+1,i,nums);
        }
        return max(pick,notpick);
    }

    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        return helper(0,-1,nums);
    }
};
