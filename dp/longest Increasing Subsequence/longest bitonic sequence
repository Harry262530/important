A Bitonic Sequence is a sequence of numbers that is first strictly increasing and then strictly decreasing.


A strictly ascending order sequence is also considered bitonic, with the decreasing part as empty, and same for a strictly descending order sequence.



For example, the sequences [1, 3, 5, 3, 2], [1, 2, 3, 4] are bitonic, whereas the sequences [5, 4, 1, 4, 5] and [1, 2, 2, 3] are not.



You are given an array 'arr' consisting of 'n' positive integers.



Find the length of the longest bitonic subsequence of 'arr'.



Example :
Input: 'arr' = [1, 2, 1, 2, 1]

Output: 3

Explanation: The longest bitonic subsequence for this array will be [1, 2, 1]. Please note that [1, 2, 2, 1] is not a valid bitonic subsequence, because the consecutive 2's are neither strictly increasing, nor strictly decreasing.


int longestBitonicSubsequence(vector<int>& arr, int n)
{
	vector<int> aage(n,1);
	vector<int> piche(n,1);
	for (int i=1;i<n;i++){
		for (int j=0;j<i;j++){
			if (arr[i]>arr[j] && aage[i]<aage[j]+1){
				aage[i]=aage[j]+1;
			}
		}
	}
	for (int i=n-2;i>=0;i--){
		for (int j=n-1;j>i;j--){
			if (arr[j]<arr[i] && piche[i]<piche[j]+1){
				piche[i]=piche[j]+1;
			}
		}
	}
	int ans=1;
	for (int i=0;i<n;i++){
		ans=max(ans,aage[i]+piche[i]-1);
	}
	return ans;
}
