Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.



Example 1:

Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.
Example 2:

Input: nums = [1,2,4,8]
Output: [1,2,4,8]


class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n,1),hash(n);
        sort(nums.begin(),nums.end());
        int maxi=0,index=0;
        for (int i=1;i<n;i++){
            hash[i]=i;
            for (int j=0;j<i;j++){
                if (nums[i]%nums[j]==0 && dp[j]+1>dp[i]){
                    dp[i]=dp[j]+1;
                    hash[i]=j;
                }
            }
            if (dp[i]>maxi){
                maxi=dp[i];
                index=i;
            }
        }
        vector<int> ans;
        ans.push_back(nums[index]);
        while (hash[index]!=index){
            index=hash[index];
            ans.push_back(nums[index]);
        }
        return ans;
    }
};
