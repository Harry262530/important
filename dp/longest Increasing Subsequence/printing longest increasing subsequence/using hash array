You are given an array 'arr' of length 'n'.



Find the Longest Increasing Subsequence of the array.



A subsequence is a subset of an array achieved by removing some (possibly 0) elements without changing the order of the remaining elements.



Increasing subsequence means a subsequence in which all the elements are strictly increasing.



Longest increasing subsequence is an increasing subsequence that has the largest length possible.



Please note that there may be more than one LIS (Longest Increasing Subsequence) possible. Return any one of the valid sequences.



Example:
Input: ‘arr’ = [5, 6, 3, 4, 7, 6]

Output: LIS = [5, 6, 7] OR [3, 4, 7] OR [3, 4, 6]


vector<int> printingLongestIncreasingSubsequence(vector<int> arr, int n) {
	vector<int> dp(n,1),hash(n);
	int maxi=1;
	int index=0;
	for (int i=1;i<n;i++){
		hash[i]=i;
		for (int j=0;j<i;j++){
			if (arr[j]<arr[i] && dp[i]<1+dp[j]){
				dp[i]=1+dp[j];
				hash[i]=j;
			}
		}
		if (dp[i]>maxi){
			maxi=dp[i];
			index=i;
		}
	}
	vector<int> ans;
	ans.push_back(arr[index]);
	while (hash[index]!=index){
		index=hash[index];
		ans.push_back(arr[index]);
	}
	reverse(ans.begin(),ans.end());
	return ans;
}
