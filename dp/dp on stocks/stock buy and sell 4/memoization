class Solution {
public:

    int helper(int i,int buy,int k,int n,vector<int> &prices,vector<vector<vector<int>>> &dp){
        if (k==0){
            return 0;
        }
        if (i==n){
            return 0;
        }
        if (dp[i][buy][k]!=-1){
            return dp[i][buy][k];
        }
        if (buy){
            return dp[i][buy][k]=max(-prices[i]+helper(i+1,0,k,n,prices,dp),helper(i+1,1,k,n,prices,dp));
        }
        else{
            return dp[i][buy][k]=max(prices[i]+helper(i+1,1,k-1,n,prices,dp),helper(i+1,0,k,n,prices,dp));
        }
    }

    int maxProfit(int k, vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>> dp(n,vector<vector<int>> (2,vector<int> (k+1,-1)));
        return helper(0,1,k,n,prices,dp);
    }
};
