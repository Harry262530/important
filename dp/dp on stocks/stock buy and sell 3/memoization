mai galti yeh kr rha tha ki jitne bhi variable hai recursion me, un sabko dp vaale vector me include krna pdega
f(index,buy,transaction left)



You are given an array prices where prices[i] is the price of a given stock on the ith day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.
Example 2:

Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.




class Solution {
public:

    int helper(int i,int buy,int n,int k,vector<int> &prices,vector<vector<vector<int>>> &dp){
        if (i>=n){
            return 0;
        }
        if (k==0){
            return 0;
        }
        if (dp[i][buy][k]!=-1){
            return dp[i][buy][k];
        }
        if (buy){
            return dp[i][buy][k]=max(-prices[i]+helper(i+1,0,n,k,prices,dp),helper(i+1,1,n,k,prices,dp));
        }
        else{
            return dp[i][buy][k]=max(prices[i]+helper(i+1,1,n,k-1,prices,dp),helper(i+1,0,n,k,prices,dp));
        }
    }

    int maxProfit(vector<int>& prices) {
        int k=2;
        int n=prices.size();
        vector<vector<vector<int>>> dp(n,vector<vector<int>> (2,vector<int> (3,-1)));
        return helper(0,1,n,k,prices,dp);
    }
};
