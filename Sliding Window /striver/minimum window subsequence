Given strings str1 and str2, find the minimum (contiguous) substring W of str1, so that str2 is a subsequence of W.

If there is no such window in str1 that covers all characters in str2, return the empty string "". If there are multiple such minimum-length windows, return the one with the left-most starting index.
 

Example 1:

Input: 
str1: geeksforgeeks
str2: eksrg
Output: 
eksforg
Explanation: 
Eksforg satisfies all required conditions. str2 is its subsequence and it is longest and leftmost among all possible valid substrings of str1.
Example 2:

Input: 
str1: abcdebdde
str2: bde
Output: 
bcde
Explanation: 
"bcde" is the answer and "deb" is not a smaller window because the elements of T in the window must occur in order.

khud se kra randomly

class Solution {
  public:
    string minWindow(string str1, string str2) {
        int i=0,j=0,mini=INT_MAX;string ans="";
        while (j<str1.size()){
            if (str1[j]==str2[0]){
                int k=0;
                i=j;
                while (j<str1.size() && k<str2.size() ){
                    if (str1[j]==str2[k]){
                        k++;
                    }
                    j++;
                }
                if (k==str2.size()){
                    if (mini>j-i){
                        mini=j-i;
                        ans=str1.substr(i,j-i);
                    }
                }
                j=i;
            }
            j++;
        }
        return ans;
    }
};





class Solution {
  public:
    string minWindow(string str1, string str2) {
        int i=0,j=0,k=0;
        int ans=INT_MAX,start=-1;
        string answ="";
        while (j<str1.size() && k<str2.size()){
            if (str1[j]==str2[k]){
                k++;
            }
            // saare element match ho gye
            if (k==str2.size()){
                k=str2.size()-1;
                i=j;
                while (i>=0 && k>=0){
                    if (str1[i]==str2[k]){
                        k--;
                    }
                    i--;
                }
                i++;
                k=0;
                if (ans>j-i+1){
                    ans=j-i+1;
                    answ=str1.substr(i,ans);
                }
                // agli baar uske agle index se start hoga lekin baad me j++ krna hi hai isliye i pe rakh liya
                j=i;
            }
            j++;
        }
        return answ;
    }
};
