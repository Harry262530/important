Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.


jo solution khud se kra

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_map<char,int> m;
        int count=0;
        int maxi=0;
        int i=0,j=0;
        while (j<s.size()){
            m[s[j]]++;
            if (m[s[j]]==1){
                count++;
                maxi=max(maxi,count);
            }
            else{
                while (s[i]!=s[j]){
                    m[s[i]]--;
                    if (m[s[i]]==0){
                        m.erase(m[s[i]]);
                    }
                    i++;
                }
                m[s[i]]--;
                if (m[s[i]]==0){
                    m.erase(m[s[i]]);
                }
                i++;
                count=j-i+1;
            }
            j++;
        }
        return maxi;
    }
};


1 tarika almost same bs count na rakh ke j aur i ke sath

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_map<char,int> m;
        int count=0;
        int maxi=0;
        int i=0,j=0;
        while (j<s.size()){
            m[s[j]]++;
            if (m.size()==j-i+1){
                maxi=max(maxi,j-i+1);
            }
            else{
                while (m.size()<j-i+1){
                    m[s[i]]--;
                    if (m[s[i]]==0){
                        m.erase(s[i]);
                    }
                    i++;
                }
            }
            j++;
        }
        return maxi;;
    }
};
