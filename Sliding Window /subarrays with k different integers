Given an integer array nums and an integer k, return the number of good subarrays of nums.

A good array is an array where the number of different integers in that array is exactly k.

For example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.
A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1,2,1,2,3], k = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]
Example 2:

Input: nums = [1,2,1,3,4], k = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].

class Solution {
public:

    int helper(vector<int> &nums,int k){
        unordered_map<int,int> m;
        int i=0,j=0,ans=0;
        while (j<nums.size()){
            m[nums[j]]++;
            while (m.size()>k){
                m[nums[i]]--;
                if (m[nums[i]]==0){
                    m.erase(nums[i]);
                }
                i++;
            }
            if (m.size()<=k){
                ans+=j-i+1;
            }
            j++;
        }
        return ans;
    }

    int subarraysWithKDistinct(vector<int>& nums, int k) {
        // agar exactly k pucha hai to at most k-atmost k-1
        return helper(nums,k)-helper(nums,k-1);
    }
};
