Given two strings s and t of lengths m and n respectively, return the minimum window 
substring
 of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".

The testcases will be generated such that the answer is unique.

 

Example 1:

Input: s = "ADOBECODEBANC", t = "ABC"
Output: "BANC"
Explanation: The minimum window substring "BANC" includes 'A', 'B', and 'C' from string t.
Example 2:

Input: s = "a", t = "a"
Output: "a"
Explanation: The entire string s is the minimum window.
Example 3:

Input: s = "a", t = "aa"
Output: ""
Explanation: Both 'a's from t must be included in the window.
Since the largest window of s only has one 'a', return empty string.


class Solution {
public:
    string minWindow(string s, string t) {
        unordered_map<char,int> m;
        int i=0,j=0,mini=INT_MAX,start=0;
        for (auto x:t){
            m[x]++;
        }
        int count=m.size();
        while (j<s.size()){
            if (m.find(s[j])!=m.end()){
                m[s[j]]--;
                if (m[s[j]]==0){
                    count--;
                }
            }
            if (count==0){
                while (count==0){
                    if (m.find(s[i])!=m.end()){
                        m[s[i]]++;
                        if (m[s[i]]==1){
                            count++;
                        }
                    }
                    if (mini>j-i+1){
                        mini=j-i+1;
                        start=i;
                    }
                    i++;
                }
            }
            j++;
        }
        if (mini==INT_MAX){
            return "";
        }
        return s.substr(start,mini);
    }
};
