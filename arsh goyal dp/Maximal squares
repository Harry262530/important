Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

 

Example 1:


Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 4

class Solution {
public:
int t[301][301];
    int helper(int i,int j,int &ans,vector<vector<char>> &mat){
        if (i<0 || j<0){
            return 0;
        }
        if (t[i][j]!=-1){
            return t[i][j];
        }
        int left=helper(i,j-1,ans,mat);
        int top=helper(i-1,j,ans,mat);
        int diag=helper(i-1,j-1,ans,mat);
        int temp=0;
        if (mat[i][j]!='0'){
            temp=1+min(left,min(top,diag));
            ans=max(ans,temp);
        }
        return t[i][j]=temp;
    }

    int maximalSquare(vector<vector<char>>& matrix) {
        int n=matrix.size();
        int m=matrix[0].size();
        int ans=0;
        memset(t,-1,sizeof(t));
        int x=helper(n-1,m-1,ans,matrix);
        return ans*ans;
    }
};
