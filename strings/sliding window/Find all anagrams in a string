Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: s = "cbaebabacd", p = "abc"
Output: [0,6]
Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input: s = "abab", p = "ab"
Output: [0,1,2]
Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".

class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        unordered_map<char,int> map;
        vector<int> ans;
        for (int i=0;i<p.size();i++){
            map[p[i]]++;
        }
        int count=map.size();
        int i=0,j=0;
        while (j<s.size()){
            if (map.find(s[j])!=map.end()){
               map[s[j]]--;
                if (map[s[j]]==0){
                    count--;
                } 
            }
            
            if (j-i+1<p.size()){
                j++;
            }
            else if (j-i+1==p.size()){
                if (count==0){
                    ans.push_back(i);
                }
                if (map.find(s[i])!=map.end()){
                    map[s[i]]++;
                    if (map[s[i]]==1){
                    count++;
                    }
                }
                i++;
                j++;
                
            }
        }
        return ans;
    }
};
