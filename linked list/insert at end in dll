A doubly-linked list is a data structure that consists of sequentially linked nodes, and the nodes have reference to both the previous and the next nodes in the sequence of nodes.



Given a doubly-linked list and a value ‘k’, insert a node having value ‘k’ at the end of the doubly linked list.



Note:
You need not print anything. You’re given the head of the linked list. Return the head of the modified list.


Example:

Explain
Input: Linked List: 4 <-> 10 <-> 3 <-> 5 and ‘k’ = 20

Output: Modified Linked List: 4 <-> 10 <-> 3 <-> 5 <-> 20

Explanation: A new node having value ‘k’ = 20 is inserted at the end of the linked list.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
4
4 10 3 5
20


Sample Output 1:
4 10 3 5 20


Explanation Of Sample Input 1 :
A new node having value ‘k’ = 20 is inserted at the end of the linked list.


Sample Input 2 :
0

5


Sample Output 2 :
5

Node * insertAtTail(Node *head, int k) {
    Node* newnode=new Node(k);
    if (head==NULL){
        return newnode;
    }
    Node* temp=head;
    while (temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=newnode;
    newnode->prev=temp;
    return head;
}
