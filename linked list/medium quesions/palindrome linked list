Given the head of a singly linked list, return true if it is a 
palindrome
 or false otherwise.

 

Example 1:


Input: head = [1,2,2,1]
Output: true
Example 2:


Input: head = [1,2]
Output: false

class Solution {
public:

    ListNode * reverse(ListNode *head){
        if (head==NULL || head->next==NULL){
            return head;
        }
        ListNode *prev=NULL;
        ListNode *curr=head;
        while (curr){
            ListNode *x=curr->next;
            curr->next=prev;
            prev=curr;
            curr=x;
        }
        return prev;
    }

    bool isPalindrome(ListNode* head) {
        if (head==NULL || head->next==NULL){
            return true;
        }
        ListNode *curr=head,*mid=NULL,*slow=head,*fast=head;
        while (fast->next && fast->next->next){
            slow=slow->next;
            fast=fast->next->next;
        }
        slow->next=reverse(slow->next);
        mid=slow->next;
        slow=head;
        while (mid!=NULL){
            if (slow->val!=mid->val){
                return false;
            }
            slow=slow->next;
            mid=mid->next;
        }
        return true;
    }
};
