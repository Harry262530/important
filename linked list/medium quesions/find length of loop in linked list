Youâ€™re given a linked list. The last node might point to null, or it might point to a node in the list, thus forming a cycle.



Find out whether the linked list has a cycle or not, and the length of the cycle if it does.



If there is no cycle, return 0, otherwise return the length of the cycle.



Example:

Explain
Input: Linked List: 4 -> 10 -> 3 -> 5 -> 10(at position 2)

Output: Length of cycle = 3

Explanation: The cycle is 10, 3, 5.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
4
4 10 3 5
2
Sample Output 1:
3
Explanation Of Sample Input 1 :
The cycle is 10, 3, 5.
Sample Input 2 :
4
4 10 3 5
0
Sample Output 2 :
0
int lengthOfLoop(Node *head) {
    if (head==NULL){
        return 0;
    }
    Node *slow=head,*fast=head,*temp=NULL;
    while (fast->next && fast->next->next){
        slow=slow->next;
        fast=fast->next->next;
        if (slow==fast){
            temp=slow;
            break;
        }
    }
    if (temp==NULL){
        return 0;
    }
    slow=head;
    while (slow!=fast){
        slow=slow->next;
        fast=fast->next;
    }
    int ans=1;
    slow=slow->next;
    while (slow!=fast){
        slow=slow->next;
        ans++;
    }
    return ans;
}
