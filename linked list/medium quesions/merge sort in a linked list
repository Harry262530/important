Given the head of a linked list, return the list after sorting it in ascending order.

 

Example 1:


Input: head = [4,2,1,3]
Output: [1,2,3,4]
Example 2:


Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]
Example 3:

Input: head = []
Output: []

class Solution {
public:

    ListNode *merge(ListNode *h1,ListNode *h2){
        if (h1==NULL){
            return h2;
        }
        if (h2==NULL){
            return h1;
        }
        ListNode *dummy=new ListNode(-1e5-1);
        ListNode *head=dummy;
        while (h1 && h2){
            if (h1->val<h2->val){
                head->next=h1;
                head=head->next;
                h1=h1->next;
            }
            else{
                head->next=h2;
                head=head->next;
                h2=h2->next;
            }
        }
        while (h1){
            head->next=h1;
            head=head->next;
            h1=h1->next;
        }
        while (h2){
            head->next=h2;
            head=head->next;
            h2=h2->next;
        }
        return dummy->next;
    }

    ListNode* sortList(ListNode* head) {
        if (head==NULL || head->next==NULL){
            return head;
        }
        ListNode *slow=head;
        ListNode *fast=head;
        ListNode *prev=NULL;
        while (fast->next){
            prev=slow;
            slow=slow->next;
            fast=fast->next;
            if (fast->next){
                fast=fast->next;
            }
        }
        prev->next=NULL;
        ListNode *head1=sortList(head);
        ListNode *head2=sortList(slow);
        return merge(head1,head2);
    }
};
