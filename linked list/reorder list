You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4]
Output: [1,4,2,3]
Example 2:


Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]


class Solution {
public:

    ListNode *reverse(ListNode *curr){
        ListNode *prev=NULL,*next;
        while (curr){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }

    void reorderList(ListNode* head) {
        if (!head || !head->next || !head->next->next){
            return ;
        }
        ListNode *slow=head;
        ListNode *fast=head;
        while (fast->next && fast->next->next){
            slow=slow->next;
            fast=fast->next->next;
        }
        slow->next=reverse(slow->next);
        fast=slow->next;
        slow->next=NULL;
        ListNode *fastn,*slown;
        slow=head;
        while (fast){
            fastn=fast->next;
            slown=slow->next;
            slow->next=fast;
            fast->next=slown;
            fast=fastn;
            slow=slown;
        }
        if (slow){
            slow->next=NULL;
        }
    }
};
