Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]


class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int ind1,ind2;
        int count1=0,count2=0;
        for (int i=0;i<nums.size();i++){
            if (count1==0 && nums[i]!=ind2){
                count1=1;
                ind1=nums[i];
            }
            else if (count2==0 && nums[i]!=ind1){
                count2=1;
                ind2=nums[i];
            }
            else if (nums[i]==ind1) count1++;
            else if (nums[i]==ind2) count2++;
            else{
                count1--;
                count2--;
            }
        }
        vector<int> ans;
        int k=0,j=0;
        for (int i=0;i<nums.size();i++){
            if (nums[i]==ind1) k++;
            if (nums[i]==ind2) j++ ;
        }
        int mini=int(nums.size()/3)+1;
        if (k>=mini) ans.push_back(ind1);
        if (j>=mini) ans.push_back(ind2);
        return ans;
    }
};
