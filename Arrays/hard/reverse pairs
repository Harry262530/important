Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where:

0 <= i < j < nums.length and
nums[i] > 2 * nums[j].
 

Example 1:

Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1
Example 2:

Input: nums = [2,4,3,5,1]
Output: 3
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1
(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1


class Solution {
public:

    int helper(vector<int> &nums,int low,int mid,int high){
        int j=mid+1;
        int count=0;
        for (int i=low;i<=mid;i++){
            while (j<=high && nums[i]>2*(long long)nums[j]){
                j++;
            }
            count+=(j-(mid+1));
        }
        return count;
    }

    void merge(vector<int> &nums,int low,int mid,int high){
        vector<int> temp;
        int i=low,j=mid+1;
        while (i<=mid && j<=high){
            if (nums[i]<=nums[j]){
                temp.push_back(nums[i]);
                i++;
            }
            else{
                temp.push_back(nums[j]);
                j++;
            }
        }
        while (i<=mid){
            temp.push_back(nums[i]);
            i++;
        }
        while (j<=high){
            temp.push_back(nums[j]);
            j++;
        }
        for (int i=low;i<=high;i++){
            nums[i]=temp[i-low];
        }
    }

    int merge_sort(vector<int> &nums,int low,int high){
        int ans=0;
        if (low>=high){
            return ans;
        }
        int mid=(low+high)/2;
        ans+=merge_sort(nums,low,mid);
        ans+=merge_sort(nums,mid+1,high);
        ans+=helper(nums,low,mid,high);
        merge(nums,low,mid,high);
        return ans;
    }

    int reversePairs(vector<int>& nums) {
        int n=nums.size();
        return merge_sort(nums,0,n-1);
    }
};
