Given a DAG(direct acyclic graph), print Topological Sorting of a given graph

Detailed explanation ( Input/output format, Notes, Images )
Constraints:

Explain
1 <= T <= 10
1 <= V <= 1000
0 <= E <= 3000
0 <= U, V <= V-1

Time Limit: 1sec
Sample Input 1:

Explain
1
5 4
0 2
1 2
3 1
0 4
Sample Output 1:
Correct
Sample Output 1 Explanation:
One correct sort order is : 3 1 0 4 2.


#include <bits/stdc++.h>

vector<int> topologicalSort(vector<vector<int>> &graph, int edges, int nodes) {
    vector<int> indegree(nodes);
    vector<int> adj[nodes];
    vector<int> visited(nodes);
    for (auto x:graph){
        adj[x[0]].push_back(x[1]);
        indegree[x[1]]++;
    }
    queue<int> q;
    for (int i=0;i<nodes;i++){
        if (indegree[i]==0){
            q.push(i);
        }
    }
    vector<int> topo;
    while (!q.empty()){
        int temp=q.front();
        q.pop();
        topo.push_back(temp);
        for (auto x:adj[temp]){
            indegree[x]--;
            if (indegree[x]==0){
                q.push(x);
            }
        }
    }
    return topo;
}
