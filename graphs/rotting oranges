You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:


Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.


class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int,int>> q;
        int n=grid.size();
        int m=grid[0].size();
        int fresh=0;
        vector<int> xx{0,-1,0,1};
        vector<int> yy{-1,0,1,0};
        vector<vector<int>> visited(grid.size(),vector<int> (grid[0].size(),0));
        for (int i=0;i<n;i++){
            for (int j=0;j<m;j++){
                if (grid[i][j]==2){
                    q.push({i,j});
                    visited[i][j]=2;
                }
                else if (grid[i][j]==1){
                    fresh++;
                }
            }
        }
        int ans=0,count=0;
        while (!q.empty()){
            
            int size=q.size();
            bool flag=false;
            for (int i=0;i<size;i++){
                auto temp=q.front();
                q.pop();
                int x=temp.first;
                int y=temp.second;
                for (int j=0;j<4;j++){
                    int nx=x+xx[j];
                    int ny=y+yy[j];
                    if (nx>=0 && nx<n && ny>=0 && ny<m && visited[nx][ny]!=2 && grid[nx][ny]==1){
                        visited[nx][ny]=2;
                        q.push({nx,ny});
                        count++;
                        flag=true;
                    }
                }
            }
            // i have to increase ans every time if any new fresh orange is converted, earlier i was increasing ans for every queue traversal which included no fresh orange conversion and just checking for the surrounding of rotten oranges
            if (flag){
                ans++;
            }
            
        }
        if (count==fresh){
            return ans;
        }
        return -1;
    }
};
