Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.

A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:

All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.

 

Example 1:


Input: grid = [[0,1],[1,0]]
Output: 2


class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        if (n==0 || m==0 || grid[0][0]!=0 || grid[n-1][m-1]!=0){
            return -1;
        }
        queue<pair<int,int>> q;
        vector<vector<int>> dist(n,vector<int> (m,INT_MAX));
        q.push({0,0});
        grid[0][0]=1;
        vector<vector<int>> direction={{1,1},{1,0},{0,1},{-1,0},{0,-1},{-1,-1},{1,-1},{-1,1}};
        while (!q.empty()){
            auto temp=q.front();
            q.pop();
            int x=temp.first;
            int y=temp.second;
            if (x==n-1 && y==m-1){
                return grid[x][y];
            }
            for (auto d:direction){
                int nx=x+d[0];
                int ny=y+d[1];
                if (nx>=0 && nx<n && ny>=0 && ny<m && grid[nx][ny]==0 ){
                    grid[nx][ny]=grid[x][y]+1;
                    q.push({nx,ny});
                }
            }
        }
        return -1;
    }
};
