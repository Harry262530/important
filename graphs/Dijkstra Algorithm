You have been given an undirected, connected graph of ‘V’ vertices (labelled from 0 to V-1) and ‘E’ edges. Each edge connecting two nodes 'u' and 'v' has a weight denoting the distance between them.



Your task is to find the shortest path distance from the source node 'S' to all the vertices. You have to return a list of integers denoting the shortest distance between each vertex and source vertex 'S'.



Note:


Explain
1. There are no self-loops(an edge connecting the vertex to itself) in the given graph.

2. There are no parallel edges i.e no two vertices are directly connected by more than 1 edge.


For Example:


Explain
Input:
4 5
0 1 5
0 2 8
1 2 9
1 3 2
2 3 6




#include <bits/stdc++.h>

vector<int> dijkstra(vector<vector<int>> &edge, int vertices, int edges, int source)
{
    vector<pair<int,int>> adj[vertices];
    for (auto x:edge){
        adj[x[0]].push_back({x[1],x[2]});
        adj[x[1]].push_back({x[0],x[2]});
    }
    // priority_queue<int, vector<int>, greater<int>> q;
    queue<int> q;
    vector<int> dist(vertices,INT_MAX);
    q.push(source);
    dist[source]=0;
    while (!q.empty()){
        int temp=q.front();
        q.pop();
        for (auto x:adj[temp]){
            int node=x.first;
            int dis=x.second;
            if (dist[node]>dist[temp]+dis){
                dist[node]=dist[temp]+dis;
                q.push(node);
            }
        }
    }
    for (int i=0;i<vertices;i++){
        if (dist[i]==INT_MAX){
            dist[i]=-1;
        }
    }
    return dist;
}
