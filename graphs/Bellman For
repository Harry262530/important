You have been given a directed weighted graph of ‘N’ vertices labeled from 1 to 'N' and ‘M’ edges. Each edge connecting two nodes 'u' and 'v' has a weight 'w' denoting the distance between them.



Your task is to calculate the shortest distance of all vertices from the source vertex 'src'.



Note:
If there is no path between 'src' and 'ith' vertex, the value at 'ith' index in the answer array will be 10^8.
Example :


Explain
3 3 1
1 2 2
1 3 2
2 3 -1

In the above graph: 

The length of the shortest path between vertex 1 and vertex 1 is 1->1 and the cost is 0.

The length of the shortest path between vertex 1 and vertex 2 is 1->2 and the cost is 2.

The length of the shortest path between vertex 1 and vertex 3 is 1->2->3 and the cost is 1.



vector<int> bellmonFord(int n, int m, int src, vector<vector<int>> &edges) {
    vector<int> dist(n+1,1e8);
    dist[src]=0;
    for (int i=0;i<n-1;i++){
        for (auto x:edges){
            int u=x[0];
            int v=x[1];
            int wt=x[2];
            if (dist[u]!=1e9 && dist[v]>dist[u]+wt){
                dist[v]=dist[u]+wt;
            }
        }
        
    }
    for (auto x:edges){
        int u=x[0];
        int v=x[1];
        int wt=x[2];
        if (dist[u]!=1e8 && dist[v]>dist[u]+wt){
            return {-1};
        }
    }
    return dist;
}
Hence we return [0, 2, 1].
