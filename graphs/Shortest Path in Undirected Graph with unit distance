You are given an undirected graph with 'N' nodes and 'M' edges. The weight of each edge in the graph is one unit.



Given a source vertex 'src', you must return an array 'answer' of length 'N', where 'answer[i]' is the shortest path length between the source vertex 'src' and 'i'th vertex.



Note:
All the nodes are zero-based.
Example:
Input:
N=5, M=5, edges=[(0, 1), (1, 4), (2, 3), (2, 4), (3, 4)], src=1 
Output: 1 0 2 2 1


#include <bits/stdc++.h>
vector<int> shortestPath(int n, vector<vector<int>>&edges, int src) {
    vector<int> adj[n];
    for (int i=0;i<edges.size();i++){
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }
    vector<int> dist(n,INT_MAX);
    dist[src]=0;
    queue<int> q;
    q.push(src);
    while (!q.empty()){
        auto temp=q.front();
        q.pop();
        for (auto &x:adj[temp]){
            if (dist[temp]+1<dist[x]){
                dist[x]=dist[temp]+1;
                q.push(x);
            }
        }
    }
    for (int i=0;i<n;i++){
        if (dist[i]==INT_MAX){
            dist[i]=-1;
        }
    }
    return dist;
}
