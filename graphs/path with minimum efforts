You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.

A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.

Return the minimum effort required to travel from the top-left cell to the bottom-right cell.

 

Example 1:



Input: heights = [[1,2,2],[3,8,2],[5,3,5]]
Output: 2
Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.
This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.


class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        int n=heights.size();
        int m=heights[0].size();
        vector<vector<int>> dist(n,vector<int> (m,INT_MAX));
        priority_queue<pair<int, pair<int, int>>,
                       vector<pair<int, pair<int, int>>>,
                       greater<pair<int, pair<int, int>>>>
            q;
        q.push({0,{0,0}});
        int ans=INT_MAX;
        vector<int> xx{0,1,0,-1};
        vector<int> yy{-1,0,1,0};
        dist[0][0]=0;
        while (!q.empty()){
            auto temp=q.top();
            q.pop();
            int d=temp.first;
            int x=temp.second.first;
            int y=temp.second.second;
            if (x==n-1 && y==m-1){
                return dist[x][y];
            }
            if (dist[x][y]<d){
                continue;
            }
            for (int i=0;i<4;i++){
                int nx=x+xx[i];
                int ny=y+yy[i];
                if (nx>=0 && nx<n && ny>=0 && ny<m){

                    // kisi bhi raste ki maximum height difference rakhna hai isliye uske previous height aur height difference ko minus krke maximum nikala
                    if (dist[nx][ny]>max(d,abs(heights[x][y]-heights[nx][ny]))){
                        dist[nx][ny]=max(d,abs(heights[x][y]-heights[nx][ny]));
                        q.push({dist[nx][ny],{nx,ny}});
                    }
                }
            }
        }
        return 0;
    }
};
