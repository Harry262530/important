You are given an undirected, connected and weighted graph G(V, E), consisting of V number of vertices (numbered from 0 to V-1) and E number of edges.

Find and print the total weight of the Minimum Spanning Tree (MST) using Kruskal's algorithm.

By definition, a minimum weight spanning tree is a subset of the edges of a connected, edge-weighted undirected graph that connects all the vertices together, without any cycles and with the minimum possible total edge weight.

Detailed explanation ( Input/output format, Notes, Images )
Constraints :

Explain
2 <= V <= 10^5
1 <= E <= 3 * 10^5
0 <= X < N
0 <= Y < N
1 <= W <= 10^4

where V and E represent the number of vertices and edges respectively.
X and Y represent the vertices between which there is an edge.
W is the weight of the edge.

Time limit: 1sec
Sample Input 1 :

Explain
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
9
Explanation for Sample Input 1:
The edge (2,3) having weight 8 will be excluded from the MST. The total weight of the MST then will be 1 + 3 + 5 = 9.



#include <bits/stdc++.h>

int minimumSpanningTree(vector<vector<int>>& edges, int n)
{

  vector<pair<int,int>> adj[n];
  for (auto x:edges){
    adj[x[0]].push_back({x[1],x[2]});
    adj[x[1]].push_back({x[0],x[2]});
  }

  priority_queue<pair<int,int> ,vector<pair<int,int>>, greater<pair<int,int>>> q;
  q.push({0,0});
  vector<int> visited(n,0);
  int ans=0;
  while (!q.empty()){
    int wt=q.top().first;
    int node=q.top().second;
    q.pop();
    if (visited[node]==1){
      continue;
    }
    visited[node]=1;
    ans+=wt;
    for (auto x:adj[node]){
      if  (!visited[x.first]){
        q.push({x.second,x.first});
      }
    }
  }
  return ans;
}
