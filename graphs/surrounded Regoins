Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

 

Example 1:


Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
Explanation: Notice that an 'O' should not be flipped if:
- It is on the border, or
- It is adjacent to an 'O' that should not be flipped.
The bottom 'O' is on the border, so it is not flipped.
The other three 'O' form a surrounded region, so they are flipped.


class Solution {
public:
    void solve(vector<vector<char>>& board) {
        int n=board.size();
        int m=board[0].size();
        vector<vector<int>> visited(n,vector<int>(m,0));
        queue<pair<int,int>> q;
        for (int i=0;i<n;i++){
            for (int j=0;j<m;j++){
                if ((i==0 || j==0 || i==n-1 || j==m-1) && board[i][j]=='O'){
                    visited[i][j]=1;
                    q.push({i,j});
                }
            }
        }
        vector<int> xx{0,-1,0,1};
        vector<int> yy{-1,0,1,0};
        while (!q.empty()){
            int x=q.front().first;
            int y=q.front().second;
            q.pop();
            for (int i=0;i<4;i++){
                int nx=x+xx[i];
                int ny=y+yy[i];
                if (nx>=0 && nx<n && ny>=0 && ny<m && board[nx][ny]=='O' && visited[nx][ny]==0){
                    visited[nx][ny]=1;
                    q.push({nx,ny});
                }
            }
        }
        for (int i=0;i<n;i++){
            for (int j=0;j<m;j++){
                if (visited[i][j]==0 && board[i][j]=='O'){
                    board[i][j]='X';
                }
            }
        }
    }
};
