Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.

 

Example 1:

Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.
Example 2:

Input: arr = [11,81,94,43,3]
Output: 444


class Solution {
public:
int mod=1e9+7;
    int sumSubarrayMins(vector<int>& arr) {
        int n=arr.size();
        stack<int> s1,s2;
        vector<int> left(n),right(n);
        left[0]=-1,right[n-1]=n;
        for (int i=0;i<n;i++){
            if (s1.empty()){
                left[i]=-1;
            }
            else if (!s1.empty() && arr[s1.top()]<=arr[i]){
                left[i]=s1.top();
            }
            else if (!s1.empty() && arr[s1.top()]>=arr[i]){
                while (!s1.empty() && arr[s1.top()]>=arr[i]){
                    s1.pop();
                }
                if (s1.empty()){
                    left[i]=-1;
                }
                else{
                    left[i]=s1.top();
                }
            }
            s1.push(i);
        }
        for (int i=n-1;i>=0;i--){
            if (s2.empty()){
                right[i]=n;
            }
            else if (!s2.empty() && arr[s2.top()]<=arr[i]){
                right[i]=s2.top();
            }
            else if (!s2.empty() && arr[s2.top()]>=arr[i]){
                while (!s2.empty() && arr[s2.top()]>=arr[i]){
                    s2.pop();
                }
                if (s2.empty()){
                    right[i]=n;
                }
                else{
                    right[i]=s2.top();
                }
            }
            s2.push(i);
        }
        int ans=0;
        for (int i=0;i<n;i++){
            ans+=((((i-left[i])*(right[i]-i)))*arr[i])%mod;
        }
        return ans;
    }
};
