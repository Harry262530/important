Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

 

Example 1:


Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.
Example 2:


Input: heights = [2,4]
Output: 4


class Solution {
public:
    int largestRectangleArea(vector<int>& h) {
        int n=h.size();
        vector<int> pse(n),nse(n);
        stack<int> s,s2;
        pse[0]=-1;
        for (int i=0;i<n;i++){
            if (s.empty()){
                pse[i]=-1;
            }
            else if (!s.empty() && h[s.top()]<h[i]){
                pse[i]=s.top();
            }
            else if (!s.empty() && h[s.top()]>=h[i]){
                while (!s.empty() && h[s.top()]>=h[i]){
                    s.pop();
                }
                if (s.empty()){
                    pse[i]=-1;
                }
                else{
                    pse[i]=s.top();
                }
            }
            s.push(i);
        }
        nse[n-1]=n;
        for (int i=n-1;i>=0;i--){
            if (s2.empty()){
                nse[i]=n;
            }
            else if (!s2.empty() && h[s2.top()]<h[i]){
                nse[i]=s2.top();
            }
            else if (!s2.empty() && h[s2.top()]>=h[i]){
                while (!s2.empty() && h[s2.top()]>=h[i]){
                    s2.pop();
                }
                if (s2.empty()){
                    nse[i]=n;
                }
                else{
                    nse[i]=s2.top();
                }
            }
            s2.push(i);
        }
        int maxi=INT_MIN;
        for (int i=0;i<n;i++){
            int temp=(nse[i]-pse[i]-1)*h[i];
            maxi=max(maxi,temp);
        }
        return maxi;
    }
};
