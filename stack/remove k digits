Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.

 

Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.


class Solution {
public:
    string removeKdigits(string num, int k) {
        stack<char> s;
        if (num.size()<=k){
            return "0";
        }
        if (k==0){
            return num;
        }
        s.push(num[0]);
        for (int i=1;i<num.size();i++){
            while (!s.empty() && k>0 && s.top()>num[i]){
                k--;
                s.pop();
            } 
            s.push(num[i]);
            // agar jo element array ke andar push hua hai vo 0 hai to uski koi zarurat nhi hai
            if (s.size()==1 && num[i]=='0'){
                s.pop();
            }
        }
        while (k>0 && !s.empty()){
            k--;
            s.pop();
        }
        string ans="";
        while (s.size()>0){
            ans+=s.top();
            s.pop();
        }
        reverse(ans.begin(),ans.end());
        if (ans.size()==0){
            return "0";
        }
        return ans;
    }
};
