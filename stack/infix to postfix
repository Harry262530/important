You are given a string 'exp' which is a valid infix expression.



Convert the given infix expression to postfix expression.



Note:

Explain
Infix notation is a method of writing mathematical expressions in which operators are placed between operands. 

For example, "3 + 4" represents the addition of 3 and 4.

Postfix notation is a method of writing mathematical expressions in which operators are placed after the operands. 

For example, "3 4 +" represents the addition of 3 and 4.

Expression contains digits, lower case English letters, ‘(’, ‘)’, ‘+’, ‘-’, ‘*’, ‘/’, ‘^’. 


Example 1:
Input: a+b*(c^d-e)^(f+g*h)-i
Output: abcd^e-fgh*+^*+i-
Explanation: Infix to postfix

Example 2:
Input: (p+q)*(m-n)
Output: pq+mn-*
Explanation: Infix to postfix


#include <bits/stdc++.h>

int prec(char c){
	if (c=='^'){
		return 3;
	}
	else if (c=='*' || c=='/'){
		return 2;
	}
	else if (c=='+' || c=='-'){
		return 1;
	}
	else{
		return 0;
	}
}

string infixToPostfix(string exp){
	stack<char> s;
	string ans="";
	for (int i=0;i<exp.size();i++){
		char x=exp[i];
		if ((x>='0' && x<='9') || (x>='A' && x<='Z') || (x>='a' && x<='z')){
			ans+=x;
		}

		else if (x=='('){
			s.push(x);
		}
		else if (x==')'){
			while (!s.empty() && s.top()!='('){
				ans+=s.top();
				s.pop();
			}
			s.pop();
		}
		else {
			while (!s.empty() && prec(x)<=prec(s.top())){
				ans+=s.top();
				s.pop();
			}
			s.push(x);
		}
	}
	while (!s.empty()){
		ans+=s.top();
		s.pop();
	}
	return ans;
}

