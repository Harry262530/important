Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.


class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& in) {
        vector<vector<int>> ans;
        sort(in.begin(),in.end());
        for (int i=0;i<in.size();i++){
            if (i==in.size()-1){
                ans.push_back(in[i]);
                break;
            }
            if (in[i+1][0]<=in[i][1]){
                in[i+1][0]=in[i][0];
                in[i+1][1]=max(in[i+1][1],in[i][1]);
            }
            else{
                ans.push_back(in[i]);
            }
        }
        return ans;
    }
};
