You are given the root of a binary tree where each node has a value in the range [0, 25] representing the letters 'a' to 'z'.

Return the lexicographically smallest string that starts at a leaf of this tree and ends at the root.

As a reminder, any shorter prefix of a string is lexicographically smaller.

For example, "ab" is lexicographically smaller than "aba".
A leaf of a node is a node that has no children.


Input: root = [0,1,2,3,4,3,4]
Output: "dba"

Input: root = [25,1,3,1,3,0,2]
Output: "adz"

class Solution {
public:

    void helper(TreeNode *root,string &ans,string temp){
        if (root==NULL){
            return;
        }
        if (root->left==NULL && root->right==NULL){
            temp+=(root->val+'a');
            reverse(temp.begin(),temp.end());
            if (ans>temp){
                ans=temp;
            }
            return;
        }
        temp+=(root->val+'a');
        helper(root->left,ans,temp);
        helper(root->right,ans,temp);
    }

    string smallestFromLeaf(TreeNode* root) {
        string ans="zzzzzzzzzzzzzzzzzzzzzzzzz";
        helper(root,ans,"");
        return ans;
    }
};
