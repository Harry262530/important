You are given a binary tree having 'n' nodes.



The boundary nodes of a binary tree include the nodes from the left and right boundaries and the leaf nodes, each node considered once.



Figure out the boundary nodes of this binary tree in an Anti-Clockwise direction starting from the root node.



Example :
Input: Consider the binary tree A as shown in the figure:

Output: [10, 5, 3, 7, 18, 25, 20]

Explanation: As shown in the figure

The nodes on the left boundary are [10, 5, 3]

The nodes on the right boundary are [10, 20, 25]

The leaf nodes are [3, 7, 18, 25].

Please note that nodes 3 and 25 appear in two places but are considered once.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
10 5 20 3 8 18 25 -1 -1 7 -1 -1 -1 -1 -1 -1 -1
Sample Output 1:
10 5 3 7 18 25 20
Explanation of Sample Input 1:
The nodes on the left boundary are [10, 5, 3]

The nodes on the right boundary are [10, 20, 25]

The leaf nodes are [3, 7, 18, 25].

Please note that nodes 3 and 25 appear in two places but are considered once.


void leftleaves(TreeNode<int> *root,vector<int> &ans){
    TreeNode<int> *curr=root->left;
    while (curr!=NULL){
        if (curr->left!=NULL || curr->right!=NULL){
            ans.push_back(curr->data);
            
        }
        if (curr->left) curr=curr->left;
        else curr=curr->right;
    }
}

void leaf(TreeNode<int> *root,vector<int> &ans){
    TreeNode<int> *curr=root;
    if (curr==NULL){
        return;
    }
    if (curr->left==NULL && curr->right==NULL){
        ans.push_back(curr->data);
        return;
    }
    leaf(root->left,ans);
    leaf(root->right,ans);
}

void rightleaves(TreeNode<int> *root,vector<int> &ans){
    TreeNode<int> *curr=root->right;
    vector<int> temp;
    while (curr!=NULL){
        if (curr->left!=NULL || curr->right!=NULL){
            temp.push_back(curr->data);
            
        }
        if (curr->right) curr=curr->right;
        else curr=curr->left;
    }
    reverse(temp.begin(),temp.end());
    for (auto x:temp){
        ans.push_back(x);
    }
}



vector<int> traverseBoundary(TreeNode<int> *root)
{
    vector<int> ans;
    if (root==NULL){
        return ans;
    }
    ans.push_back(root->data);
    leftleaves(root,ans);
    leaf(root,ans);
    rightleaves(root,ans);
    return ans;
}
