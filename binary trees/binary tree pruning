Given the root of a binary tree, return the same tree where every subtree (of the given tree) not containing a 1 has been removed.

A subtree of a node node is node plus every node that is a descendant of node.

 

Example 1:


Input: root = [1,null,0,0,1]
Output: [1,null,0,null,1]
Explanation: 
Only the red nodes satisfy the property "every subtree not containing a 1".
The diagram on the right represents the answer.
Example 2:


Input: root = [1,0,1,0,0,0,1]
Output: [1,null,1,null,1]


class Solution {
public:

    bool helper(TreeNode *root){
        if (root==NULL){
            return false;
        }
        bool left=helper(root->left);
        bool right=helper(root->right);
        if (left==false){
            root->left=NULL;
        }
        if (right==NULL){
            root->right=NULL;
        }
        return left || right || root->val==1;
    }

    TreeNode* pruneTree(TreeNode* root) {
        bool x= helper(root);
        if (x==false){
            return NULL;
        }
        return root;
    }
};
