Given the root of a binary tree, return the inorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,3,2]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100


class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        if (root==NULL){
            return {};
        }
        vector<int> ans;
        while (root!=NULL){
            if (root->left==NULL){
                ans.push_back(root->val);
                root=root->right;
            }
            else{
                TreeNode *temp=root->left;
                while (temp->right && temp->right!=root){
                    temp=temp->right;
                }
                if (temp->right==NULL){
                    temp->right=root;
                    root=root->left;
                }
                else{
                    temp->right=NULL;
                    ans.push_back(root->val);
                    root=root->right;
                }
            }
        }
        return ans;
    }
};
