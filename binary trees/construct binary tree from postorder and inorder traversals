Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.

 

Example 1:


Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
Output: [3,9,20,null,null,15,7]
Example 2:

Input: inorder = [-1], postorder = [-1]
Output: [-1]


  class Solution {
public:

    TreeNode *helper(vector<int> &inorder,int ist,int iend,vector<int> &postorder,int pst,int pend,map<int,int> &m){
        if (ist>iend || pst>pend){
            return NULL;
        }
        TreeNode *root=new TreeNode(postorder[pend]);
        int temp=m[postorder[pend]];
        int len=temp-ist;
        root->left=helper(inorder,ist,ist+len-1,postorder,pst,pst+len-1,m);
        root->right=helper(inorder,ist+len+1,iend,postorder,pst+len,pend-1,m);
        return root;
    }

    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int ist=0,iend=inorder.size()-1,pst=0,pend=postorder.size()-1;
        map<int,int> m;
        for (int i=0;i<inorder.size();i++){
            m[inorder[i]]=i;
        }
        return helper(inorder,ist,iend,postorder,pst,pend,m);
    }
};
