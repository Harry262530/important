You are given an arbitrary binary tree consisting of 'N' nodes numbered from 1 to 'N'. Your task is to print all the root to leaf paths of the binary tree.

A leaf of a binary tree is the node which does not have a left child and a right child.



For Example :
Given a binary tree :

All the root to leaf paths are :
1 2 4
1 2 5 
1 3
Note :

1. Two nodes may have the same value associated with it.
2. The root node will be fixed and will be provided in the function.
3. Note that the nodes in a path will appear in a fixed order. For example, 1 2 3 is not the same as 2 1 3.
4. Each path should be returned as a string consisting of nodes in order and separated by a space.
5. The path length may be as small as ‘1’.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
5
1 2 3 4 5 -1 -1 -1 -1 -1 -1
Sample Output 1 :
1 2 4
1 2 5 
1 3


void helper(BinaryTreeNode<int> *root,vector<string> &ans,string s){
    if (!root){
        return;
    }
    if (!root->left && !root->right){
        s+=to_string(root->data);
        ans.push_back(s);
        return;
    }
    s+=to_string(root->data)+" ";
    helper(root->left,ans,s);
    helper(root->right,ans,s);
}

vector <string> allRootToLeaf(BinaryTreeNode<int> * root) {
    vector<string> ans;
    if (!root){
        return ans;
    }
    helper(root,ans,"");
    return ans;
}
