Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.

 

Example 1:


Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]
Example 2:

Input: preorder = [-1], inorder = [-1]
Output: [-1]


  class Solution {
public:

    TreeNode *helper(vector<int> &preorder,int pst,int pend,vector<int> &inorder,int ist,int iend,map<int,int> &m){
        if (pst>pend || ist>iend){
            return NULL;
        }
        TreeNode *root=new TreeNode(preorder[pst]);
        int newst=m[preorder[pst]];
        int lim=newst-ist;
        root->left=helper(preorder,pst+1,pst+lim,inorder,ist,ist+lim,m);
        root->right=helper(preorder,pst+lim+1,pend,inorder,newst+1,iend,m);
        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int pst=0,pend=preorder.size()-1,ist=0,iend=inorder.size()-1;
        map<int,int> m;
        for (int i=0;i<inorder.size();i++){
            m[inorder[i]]=i;
        }
        return helper(preorder,pst,pend,inorder,ist,iend,m);
    }
};
